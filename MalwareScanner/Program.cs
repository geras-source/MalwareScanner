using MalwareScanner.File;
using MalwareScanner.Report;
using MalwareScanner.Scanner;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.IO;

namespace MalwareScanner
{
    class Program
    {
        internal static IHostBuilder CreateHostBuilder(string[] args)
        {
            var hostBuilder = Host.CreateDefaultBuilder(args)
                .ConfigureAppConfiguration((context, builder) =>
                {
                    builder.SetBasePath(Directory.GetCurrentDirectory());
                })
                .ConfigureServices((context, services) =>
                {
                    //add service registrations
                    services
                    .AddScoped<IFileServices, FileServices>()
                    .AddScoped<IReportServices, ReportServices>()
                    .AddScoped<IScannerServices, ScannerServices>();
                });

            return hostBuilder;
        }

        internal static void PreparationAndScanning(string[] args)
        {
            var path = args[0];
            var host = CreateHostBuilder(args).Build();
            var fileServices = host.Services.GetService<IFileServices>();
            var reportServices = host.Services.GetService<IReportServices>();
            var scannerServices = host.Services.GetService<IScannerServices>();

            var resultFromFileServices = fileServices.GetTextFromFiles(path);
            scannerServices.StartScan(resultFromFileServices);
            var resultReport = reportServices.GetAReport();

            Console.WriteLine(resultReport);
        }
        static void Main(string[] args)
        {
            DirectoryInfo directory = new DirectoryInfo(args[0]);
            if (args.Length == 0 || args.Length > 1 || args[0].IndexOfAny(Path.GetInvalidPathChars()) != -1)
            {
                Console.WriteLine("Отсуствует аргумент или он неправильный");
            }
            else if (!directory.Exists)
            {
                Console.WriteLine("Данный путь не существует");
            }
            else
            {
                PreparationAndScanning(args);
            }
        }
    }
}
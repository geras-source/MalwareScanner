using System;
using System.Collections.Concurrent;
using System.IO;
using System.Threading.Tasks;

namespace MalwareScanner.File
{
    public class FileServices : IFileServices
    {
        private readonly ConcurrentBag<string> listOfPathToFiles = new ConcurrentBag<string>();
        /// <summary>
        /// Внутренний метод получения списка всех файлов, которые находятся в указанной директории
        /// </summary>
        /// <param name="pathDirectory">Путь к указанной директории</param>
        private void GetPathToFiles(string pathDirectory)
        {
            DirectoryInfo directory = new DirectoryInfo(pathDirectory);
            foreach (var fileInfo in directory.GetFiles("*"))
            {
                listOfPathToFiles.Add(fileInfo.FullName);
            }
        }

        /// <summary>
        /// Реализация метода по парсингу текста из файлов
        /// Чтение файлов производится параллельно, максимальное кол-во операций равно кол-ву потоков процессора
        /// </summary>
        /// <param name="pathDirectory">Путь к указанной директории</param>
        /// <returns>Возвращает потокобезопасную коллекцию класса Files</returns>
        public ConcurrentBag<Files> GetTextFromFiles(string pathDirectory)
        {
            GetPathToFiles(pathDirectory);
            var result = new ConcurrentBag<Files>();
            
            Parallel.ForEach(listOfPathToFiles, new ParallelOptions { MaxDegreeOfParallelism = Environment.ProcessorCount }, path =>
            {
                using (var reader = new StreamReader(path))
                {
                    try
                    {
                        string text = reader.ReadToEnd();

                        result.Add(new Files
                        {
                            PathTofile = path,
                            TextFromFile = text,
                            IsRead = true
                        });

                    }
                    catch
                    {

                        result.Add(new Files
                        {
                            PathTofile = path,
                            TextFromFile = null,
                            IsRead = false
                        });

                    }
                }
            });

            return result;
        }
    }
}